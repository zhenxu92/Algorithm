/**
 * ShortestPath using Dijkstra Algorithm v 1.0
 * @author zhenxu
 *
 */

import java.util.*;
public class ShortestPath {
	private List<Vertex> nodes;
	private List<Edge> edges;
	private Set<Vertex> knownNodes;
	private Set<Vertex> unknownNodes;
	private Map<Vertex, Vertex> pre;
	private Map<Vertex, Integer> distance;
	
	public ShortestPath(Graph g) {
		this.nodes = new ArrayList<Vertex>(g.getVertices());
		this.edges = new ArrayList<Edge>(g.getEdges());
	}
	
	private int getShortestDistance(Vertex end) {
		Integer d = distance.get(end);
		if(d == null) {
			return Integer.MAX_VALUE;
		} else {
			return d;
		}
	}
	
	private Vertex getMinimum(Set<Vertex> vertices) {
		Vertex minimum = null;
		for(Vertex vertex : vertices) {
			if(minimum == null) {
				minimum = vertex;
			} else {
				if(this.getShortestDistance(minimum) > this.getShortestDistance(vertex)) {
					minimum = vertex;
				}
			}
		}
		return minimum;
	}
	
	public LinkedList<Vertex> getPath(Vertex end) {
		LinkedList<Vertex> path = new LinkedList<Vertex>();
		Vertex step = end;
		if(pre.get(step) ==  null) {
			return null;
		}
		path.add(step);
		while(pre.get(step) != null) {
			step = pre.get(step);
			path.add(step);
		}
		Collections.reverse(path);
		return path;
	}
}
